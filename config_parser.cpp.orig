#include "config_parser.h"
#include "parse_utilities.h"
#include <fstream>
#include <stdexcept>
#include <sstream>

namespace SimpleConfig
{

ConfigParser::ConfigParser()
{}

ConfigParser::~ConfigParser()
{}

void ConfigParser::Parse(const std::string& filename)
{
   Parse(filename.c_str());
}

void ConfigParser::Parse(const char *filename)
{
   std::ifstream file(filename);
   if (! file.is_open() )
   {
      std::string fName(filename);
      throw std::runtime_error("Could not open file " + fName);
   }
   Parse(file);
}

void ConfigParser::Parse(std::istream& configStream)
{
   mCurToken = lexer.GetNextToken(configStream);
   mCurSection = "";
   while(mCurToken.type != END_OF_FILE)
   {
      switch(mCurToken.type)
      {
      case LEFT_BRACKET:
         ParseSectionHeader(configStream);
         break;
      case IDENTIFIER:
         ParseAssignment(configStream);
         break;
      default:
         ParseError("assignment or section header");
         break;
      }
      mCurToken = lexer.GetNextToken(configStream);
   }
}

void ConfigParser::ParseSectionHeader(std::istream& configStream)
{
   mCurToken = lexer.GetNextToken(configStream);
   if(mCurToken.type == IDENTIFIER)
   {
      mCurSection = mCurToken.lexeme;
   }
   else
   {
      mCurSection = "";
   }

   mCurToken = lexer.GetNextToken(configStream);
   if(mCurToken.type != RIGHT_BRACKET)
   {
      ParseError("']' in section header");
   }
}

void ConfigParser::ParseAssignment(std::istream& configStream)
{
   std::string id = mCurToken.lexeme;
   mCurToken = lexer.GetNextToken(configStream);
   if(mCurToken.type != EQUALS)
   {
      ParseError("'=' after identifier");
   }
   mCurToken = lexer.GetNextToken(configStream);
   if(!IsLiteral(mCurToken))
   {
      ParseError("literal after '='");
   }
   parseMap[mCurSection][id] = mCurToken;
}

bool ConfigParser::IsLiteral(const Token& tok)
{
   return (tok.type == BOOL) || (tok.type == INTEGER) || (tok.type == REAL_NUMBER) || (tok.type == STRING);
}

Token ConfigParser::Lookup(const std::string& section, const std::string& key) const
{
   std::map<std::string, std::map<std::string, Token> >::const_iterator sectionIt = parseMap.find(section);
   if(sectionIt == parseMap.end())
   {
      throw std::invalid_argument("Section " + section + " not found");
   }

   std::map<std::string, Token>::const_iterator keyIt = sectionIt->second.find(key);
   if(keyIt == sectionIt->second.end())
   {
      throw std::invalid_argument("Key" + key + " not found in section " + section);
   }

   return keyIt->second; 
}


bool ConfigParser::LookupBoolean(const std::string& section, const std::string& key) const
{
   bool value;
   Token tok = Lookup(section, key); //Throws if not found

   try
   {
      value = Str2Bool(tok.lexeme);
   }
   catch(std::logic_error& e)
   {
      ConversionError(section, key, e.what(), tok.lineNum);
   }

   return value;
}

bool ConfigParser::LookupBoolean(const std::string& key) const
{
   return LookupBoolean("", key);
}

double ConfigParser::LookupDouble(const std::string& section, const std::string& key) const
{
   double value;
   Token tok = Lookup(section, key); //Throws if not found

   try
   {
      value = Str2Double(tok.lexeme);
   }
   catch(std::logic_error& e)
   {
      ConversionError(section, key, e.what(), tok.lineNum);
   }
   return value;
}

double ConfigParser::LookupDouble(const std::string& key) const
{
   return LookupDouble("", key);
}


int ConfigParser::LookupInteger(const std::string& section, const std::string& key) const
{
   int value;
   Token tok = Lookup(section, key); //Throws if not found

   try
   {
      value = Str2Int(tok.lexeme);
   }
   catch(std::logic_error& e)
   {
      ConversionError(section, key, e.what(), tok.lineNum);
   }

   return value;
}

int ConfigParser::LookupInteger(const std::string& key) const
{
   return LookupInteger("", key);
}

std::string ConfigParser::LookupString(const std::string& section, const std::string& key) const
{
   Token tok = Lookup(section, key); //Throws if not found
   return tok.lexeme;
}

std::string ConfigParser::LookupString(const std::string& key) const
{
   return LookupString("", key);
}


void ConfigParser::ParseError(const char* expected)
{
   std::stringstream msgBuf;
   msgBuf << "Syntax error (line " << mCurToken.lineNum << ")\n";
   msgBuf << "Expected: " << expected << " Got: " << mCurToken.lexeme; 
   throw std::runtime_error(msgBuf.str());
}


void ConfigParser::ConversionError(std::string section, std::string key, std::string caughtMsg, int sourceLine) const
{
   std::stringstream msgBuf; 
   msgBuf << "Conversion error in lookup ";
   if(!section.empty())
   {
      msgBuf << "\"" << section << "\":";
   }
   msgBuf << "\"" << key << "\" (source line " << sourceLine <<")\n";
   msgBuf << caughtMsg;
   throw std::logic_error(msgBuf.str());
}

}
